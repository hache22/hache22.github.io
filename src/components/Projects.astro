---
import GitHub from "../components/icons/Github.astro";
import Python from "../components/icons/Python.astro";
import JupyterNotebook from "../components/icons/JupyterNotebook.astro";
import Link from "../components/icons/Link.astro";
import LinkButton from "./LinkButton.astro";
import IA from "./icons/AI.astro";
import Brain from "./icons/Brain.astro";
import Analisis from "./icons/Analisis.astro";
import Informe from "./icons/Histograma.astro";
import R from "./icons/R.astro";
const TAGS = {
    Python: {
        name: "Python",
        class: "bg-[#003159] text-white",
        icon: Python,
    },
    JupyterNotebook: {
        name: "Jupyter Notebook",
        class: "bg-[#003159] text-white",
        icon: JupyterNotebook,
    },
    ai: {
        name: "Inteligencia Artificial",
        class: "bg-[#003159] text-white",
        icon: IA,
    },
    RedesNeuronales: {
        name: "Redes Neuronales",
        class: "bg-[#003159] text-white",
        icon: Brain,
    },
    AnalisisDatos: {
        name: "Analisis de Datos",
        class: "bg-[#003159] text-white",
        icon: Analisis,
    },
    Estadistica: {
        name: "Estadistica",
        class: "bg-[#003159] text-white",
        icon: Informe,
    },
    R: {
        name: "Markdown",
        class: "bg-[#003159] text-white",
        icon: R,
    },
};
const PROJECTS = [
    {
        title: "Informe Analítico de Datos",
        link: "https://drive.google.com/file/d/1YlbcVzBRQ5VPUmMdw42wVI5TcxjwMQj4/view?usp=drive_link",
        github: "",
        description:
            `Análisis de uso de bicicletas Divvy en miembros vs. usuarios casuales. Consolidación de datos para responder preguntas clave sobre los patrones de uso. Estudio comparativo del uso de bicicletas Divvy y sus implicaciones para estrategias de negocio.`,
        image: "./projects/grafico1.png",
        tags: [TAGS.R, TAGS.AnalisisDatos, TAGS.Estadistica],
    },
    {
        title: "Ingeniería de Datos con Python",
        description:
            `Proyecto en el que se despliega técnica ETL para ingenieria de datos con python.  
            El objetivo principal es proporcionar a la organización una visión integral y actualizada de las economías globales, haciendo uso de información pública.`,

        link: "",
        github: "https://github.com/hache22/ETL?tab=readme-ov-file",
        image: "./projects/p1.png",
        tags: [TAGS.Python, TAGS.AnalisisDatos],
    },
    {
        title: "Script para Predicción del Precio de Acciones",
        description:
            `Predicción de precios de acciones en la Bolsa de Nueva York utilizando modelos de machine learning en Python. 
            Extracción, preprocesamiento y entrenamiento de datos para generar predicciones precisas y apoyar la toma de decisiones de inversión`,
        link: "",
        github: "https://github.com/hache22/PredicePrecioAcciones",
        image: "./projects/p11.png",
        tags: [TAGS.Python, TAGS.JupyterNotebook, TAGS.AnalisisDatos],
    },
    {
        title: "Análisis de Datos: Warriors Games",
        description:
            `Análisis comparativo del rendimiento de los Golden State Warriors en juegos de local y visitante. Estudio detallado de los datos para identificar patrones y tendencias.`,
        link: "",
        github: "https://github.com/hache22/Warriors-Games",
        image: "./projects/p2.png",
        tags: [TAGS.Python, TAGS.JupyterNotebook, TAGS.AnalisisDatos],
    },
    {
        title: "Aprendizaje Automático: Modelo Regresion Lineal",
        description:
            `Desarrollo de un modelo de regresión lineal para convertir grados Celsius a Fahrenheit de manera automática. La herramienta permite obtener conversiones de temperatura en tiempo real.`,
        link: "",
        github: "https://github.com/hache22/Regresion_Lineal",
        image: "./projects/p3.png",
        tags: [TAGS.Python, TAGS.JupyterNotebook, TAGS.ai],
    },
    {
        title: "Deep Learning - GAN'S",
        description:
            `Este proyecto crea Red Generativa Adversarial (GAN), que consiste en dos redes neuronales en competencia para generar nuevos datos.`,
        link: "",
        github: "https://github.com/hache22/Redes-Generativas-Adversariales",
        image: "./projects/p4.png",
        tags: [TAGS.Python, TAGS.JupyterNotebook, TAGS.RedesNeuronales],
    },
    {
        title: "Redes Neuronales - AutoEncoder",
        description:
            `Desarrollo de un autocodificador de imágenes en Python utilizando TensorFlow, Pandas, NumPy, Matplotlib y random. 
            El proyecto busca crear un modelo capaz de aprender las características latentes de un conjunto de imágenes y reconstruirlas de forma precisa.`,
        link: "",
        github: "https://github.com/hache22/Autoencoder",
        image: "./projects/p5.png",
        tags: [TAGS.Python, TAGS.JupyterNotebook, TAGS.RedesNeuronales],
    },
    {
        title: "Redes Neuronales Convolucionales - CNN",
        description:
            `Proyecto creado en python que crea una CNN para reconocimiento de imágenes. 
            Utiliza TensorFlow, Pandas, NumPy y Matplotlib para construir y entrenar una red neuronal convolucional.`,
        link: "",
        github: "https://github.com/hache22/Redes-Convolucionales",
        image: "./projects/p6.png",
        tags: [TAGS.Python, TAGS.JupyterNotebook, TAGS.RedesNeuronales],
    },
    {
        title: "Transferencia de Aprendizaje",
        description:
            `Utilización de modelo secuencial pre-entrenado para reconocimiento de nuevas imágenes. Se Reentrena el modelo secuencial, adaptandolo  para reconocer nuevas imágenes específicas.`,
        link: "",
        github: "https://github.com/hache22/PrediccionImagenes",
        image: "./projects/p7.png",
        tags: [TAGS.Python, TAGS.JupyterNotebook, TAGS.ai],
    },
    {
        title: "Análisis de Datos: Árbol de Decisión",
        description:
            `Análisis de supervivencia en el Titanic. Modelo de Árbol de Decisión Random Forest para predecir la supervivencia de pasajeros basado en edad, sexo, clase social y otros factores.`,
        link: "",
        github: "https://github.com/hache22/TITANIC-Arbol_de_Decision",
        image: "./projects/p8.png",
        tags: [TAGS.Python, TAGS.JupyterNotebook, TAGS.AnalisisDatos],
    },
    {
        title: "Análisis de Datos: Clustering",
        description:
            `Segmentación de mercado inmobiliario en California. Se hace uso de Clustering K-means para identificar grupos de compradores basados en ingresos, tamaño de la familia y preferencias de ubicación.`,
        link: "",
        github: "https://github.com/hache22/PrediccionImagenes",
        image: "./projects/p9.png",
        tags: [TAGS.Python, TAGS.JupyterNotebook, TAGS.ai],
    },
];
---

<div class="flex flex-col">
    {
        PROJECTS.map(({ image, title, description, tags, link, github }) => (
            <article class="flex space-x-0 space-y-0 group md:flex-row md:space-x-6 md:space-y-0">
                <div class="flex">
                    <div class="relative flex flex-col items-center  transition duration-10 ease-in-out transform overflow-clip rounded  md:group-hover:-translate-y-0  lg:hover:border-white lg:hover:bg-white-200">
                        <img
                            alt="Proyecto"
                            class="transition duration-500  md:group-hover:scale-90"
                            src={image}
                        />
                    </div>
                </div>

                <div class="w-full md:w-1/2 md:max-w-lg">
                    <h3 class="text-2xl font-bold text-white-800 dark:text-gray-100">
                        {title}
                    </h3>
                    <div class="flex flex-wrap mt-2">
                        <ul class="flex flex-row mb-2 gap-x-2">
                            {tags.map((tag) => (
                                <li>
                                    <span
                                        class={`flex gap-x-2 rounded-full text-xs ${tag.class} py-1 px-2 `}
                                    >
                                        <tag.icon class="size-4" />
                                        {tag.name}
                                    </span>
                                </li>
                            ))}
                        </ul>

                        <div class="mt-2 text-white-800 dark:text-gray-400">
                            {description}
                        </div>
                        <footer class="flex items-end justify-start mt-4 gap-x-2">
                            {github && (
                                <LinkButton href={github}>
                                    <GitHub class="size-6" />
                                    Repositorio
                                </LinkButton>
                            )}
                            {link && (
                                <LinkButton href={link}>
                                    <Link class="size-6" />
                                    Visualizar Informe
                                </LinkButton>
                            )}
                        </footer>
                    </div>
                </div>
            </article>
        ))
    }
</div>
